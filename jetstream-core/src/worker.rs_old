use std::net::{Ipv4Addr, SocketAddr, SocketAddrV4};
use std::rc::Rc;
use std::sync::Mutex;

use crate::channels::selective_broadcast::{self};
use crate::operators::void::Void;
use crate::snapshot::controller::make_snapshot_controller;
use crate::snapshot::PersistenceBackend;
use crate::stream::jetstream::JetStreamBuilder;
use crate::stream::operator::{
    pass_through_operator, BuildContext, BuildableOperator, OperatorBuilder, RunnableOperator,
};
use crate::time::{NoTime, NoTime};
use crate::{MaybeData, MaybeKey, NoData, NoKey, OperatorId, OperatorPartitioner, WorkerId};
use thiserror::Error;

pub struct RuntimeBuilder {
    root_stream: JetStreamBuilder<NoKey, NoData, NoTime>,
    persistence_backend: Rc<dyn PersistenceBackend>,
    inner: Rc<Mutex<InnerRuntimeBuilder>>,
}
impl RuntimeBuilder {
    pub fn new(
        persistence_backend: impl PersistenceBackend,
        snapshot_timer: impl FnMut() -> bool + 'static,
    ) -> RuntimeBuilder {
        let persistence_backend = Rc::new(persistence_backend);
        let snapshot_op = make_snapshot_controller(persistence_backend.clone(), snapshot_timer);

        let inner = Rc::new(Mutex::new(InnerRuntimeBuilder {
            operators: Vec::new(),
        }));
        let root_stream = JetStreamBuilder::from_operator(snapshot_op, inner.clone())
            .label("jetstream::stream_root");

        RuntimeBuilder {
            root_stream,
            persistence_backend,
            inner,
        }
    }

    pub fn new_stream(&self) -> JetStreamBuilder<NoKey, NoData, NoTime> {
        JetStreamBuilder::from_operator(pass_through_operator(), self.inner.clone())
    }

    pub fn build(self, config: crate::config::Config) -> Result<Runtime, BuildError> {
        let ref_count = Rc::strong_count(&self.inner);

        // need to do this here to drop the root_streams ref on the InnerRuntimeBuilder
        let root_operators = self.root_stream.into_operators();

        let inner =
            Rc::try_unwrap(self.inner).map_err(|_| BuildError::UnfinishedStreams(ref_count - 1))?;
        let operators = inner.into_inner().unwrap().finish();
        // TODO: make all of this configurable
        let listen_addr = SocketAddr::V4(SocketAddrV4::new(Ipv4Addr::new(0, 0, 0, 0), config.port));
        let peers = config.get_cluster_uris();
        let peer_len = peers.len();
        let _operator_ids: Vec<OperatorId> =
            (0..(operators.len() + root_operators.len())).collect();

        let mut communication_backend = postbox::PostboxBuilder::new()
            .build(listen_addr, move |addr: &(WorkerId, OperatorId)| {
                peers.get(&addr.0).cloned()
            })
            .unwrap();

        let operators: Vec<RunnableOperator> = root_operators
            .into_iter()
            .chain(operators)
            .enumerate()
            .map(|(i, x)| {
                let label = x.get_label().unwrap_or(format!("operator_id_{}", i));
                let mut ctx = BuildContext::new(
                    config.worker_id,
                    i,
                    label,
                    self.persistence_backend.latest(config.worker_id),
                    &mut communication_backend,
                    0..peer_len,
                );
                x.into_runnable(&mut ctx)
            })
            .collect();
        Ok(Runtime {
            worker_id: config.worker_id,
            operators,
            communication: communication_backend,
        })
    }
}

#[derive(Error)]
pub enum BuildError {
    #[error("Error building Postbox communication backend")]
    PostboxError(RuntimeBuilder, postbox::errors::BuildError),
    #[error("{0} Unfinished streams in this runtime.
    You must call `.finish()` on all streams created on this runtime
    or drop them before building the Runtime")]
    UnfinishedStreams(usize),
}
impl std::fmt::Debug for BuildError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::PostboxError(_, arg1) => f.debug_tuple("PostboxError").field(arg1).finish(),
            Self::UnfinishedStreams(arg1) => {
                f.debug_tuple("UnfinishedStreams").field(arg1).finish()
            }
        }
    }
}

#[derive(Default)]
pub(crate) struct InnerRuntimeBuilder {
    operators: Vec<Box<dyn BuildableOperator>>,
}
impl InnerRuntimeBuilder {
    // pub fn new_stream(&mut self) -> JetStreamBuilder<NoKey, NoData, NoTime> {
    //     let mut new_op = pass_through_operator();
    //     selective_broadcast::link(self.root_stream.get_output_mut(), new_op.get_input_mut());
    //     JetStreamBuilder::from_operator(new_op).label("jetstream::pass_through")
    // }

    pub(crate) fn add_stream<K: MaybeKey, V: MaybeData, T: NoTime>(
        &mut self,
        stream: JetStreamBuilder<K, V, T>,
    ) {
        // call void to destroy all remaining messages
        self.operators.extend(
            stream
                .void()
                .label("jetstream::stream_end")
                .into_operators(),
        )
    }
    // destroy this builder and return the operators
    fn finish(self) -> Vec<Box<dyn BuildableOperator>> {
        self.operators
    }
}

/// Unions N streams with identical output types into a single stream
pub(crate) fn union<K: MaybeKey, V: MaybeData, T: NoTime>(
    runtime: Rc<Mutex<InnerRuntimeBuilder>>,
    streams: impl Iterator<Item = JetStreamBuilder<K, V, T>>,
) -> JetStreamBuilder<K, V, T> {
    // this is the operator which reveives the union stream
    let mut unioned = pass_through_operator();

    let mut rt = runtime.lock().unwrap();
    for mut input_stream in streams {
        selective_broadcast::link(input_stream.get_output_mut(), unioned.get_input_mut());
        rt.add_stream(input_stream);
    }
    drop(rt);
    JetStreamBuilder::from_operator(unioned, runtime)
}

pub(crate) fn split_n<const N: usize, K: MaybeKey, V: MaybeData, T: NoTime>(
    runtime: Rc<Mutex<InnerRuntimeBuilder>>,
    input: JetStreamBuilder<K, V, T>,
    partitioner: impl OperatorPartitioner<K, V, T>,
) -> [JetStreamBuilder<K, V, T>; N] {
    let partition_op = OperatorBuilder::new_with_output_partitioning(
        |_| {
            |input, output, _ctx| {
                if let Some(x) = input.recv() {
                    output.send(x)
                }
            }
        },
        partitioner,
    );
    let mut input = input.then(partition_op);

    let new_streams: Vec<JetStreamBuilder<K, V, T>> = (0..N)
        .map(|_| {
            let mut operator = pass_through_operator();
            selective_broadcast::link(input.get_output_mut(), operator.get_input_mut());
            JetStreamBuilder::from_operator(operator, runtime.clone())
        })
        .collect();

    let mut rt = runtime.lock().unwrap();

    rt.add_stream(input);

    // SAFETY: We can unwrap because the vec was built from an iterator of size N
    // so the vec is guaranteed to fit
    unsafe { new_streams.try_into().unwrap_unchecked() }
}

pub struct Runtime {
    worker_id: WorkerId,
    operators: Vec<RunnableOperator>,
    communication: postbox::Postbox<(WorkerId, OperatorId)>,
}
impl Runtime {
    pub fn step(&mut self) {
        let span = tracing::debug_span!("scheduling::run_graph", worker_id = self.worker_id);
        let _span_guard = span.enter();
        for op in self.operators.iter_mut().rev() {
            op.step(&mut self.communication);
            while op.has_queued_work() {
                op.step(&mut self.communication);
            }
        }
    }
}
